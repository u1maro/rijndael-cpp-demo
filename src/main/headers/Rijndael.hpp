
#ifndef RIJNDALE_H
#define RIJNDALE_H

#include <array>
#include <iostream>
#include <memory>

#include <boost/format.hpp>

template <typename Padder, const size_t KeyLength = 256, typename D = uint8_t>
class Rijndael {
    public:
    using DataType = D;
    using BufferType = DataType[];
    using BufferPtr = std::unique_ptr<BufferType>;

    explicit Rijndael(const Padder &padder)
    : _padder{ padder }, _blockSize{ padder.blockSize() }, _nb{ _blockSize / 4 },
      _keyLength{ KeyLength }, _nk{ _keyLength / 4 } {}

    std::pair<BufferPtr, size_t>
    enc (const BufferPtr &data, const size_t dataLength, const BufferPtr &key, const BufferPtr &iv) {
        auto padded = _padder.pad(data, dataLength);
        auto paddedData = std::move(padded.first);
        auto paddedLength = padded.second;

        auto ret = std::make_unique<BufferType>(paddedLength);

        init();
        _state.reset(new DataType[_blockSize]);
        for (size_t i = 0; i < _blockSize; i += 1) {
            _state[i] = iv[i];
        }

        keyExpansion(key);

        for (size_t bCount = 0; bCount < paddedLength / _blockSize; bCount += 1) {
            auto block = std::make_unique<BufferType>(_blockSize);
            for (size_t i = 0; i < _blockSize; i += 1) {
                block[i] = paddedData[bCount * _blockSize + i];
            }

            encBlock(block);

            for (size_t i = 0; i < _blockSize; i += 1) {
                ret[bCount * _blockSize + i] = _state[i];
            }
        }

        return std::make_pair(std::move(ret), paddedLength);
    }

    private:
    const Padder _padder;
    size_t _blockSize;
    size_t _nb;
    size_t _keyLength;
    size_t _nk;
    size_t _nr;

    std::array<DataType, 256> _sbox;
    BufferPtr _state;
    std::array<DataType, 256> _rcon;
    BufferPtr _expandedKey;

    void printState(bool breakline = false) {
        for (size_t i = 0; i < _blockSize; i += 1) {
            std::cout << boost::format("%1$02X ") % (int)_state[i];
            if ((i + 1) % _nb == 0 && breakline) {
                std::cout << std::endl;
            }
        }
        std::cout << std::endl;
    }

    void printData(const BufferPtr &data, const size_t length) {
        for (size_t i = 0; i < length; i += 1) {
            std::cout << boost::format("%1$02X ") % (int)data[i];
            if ((i + 1) % 16 == 0) {
                std::cout << std::endl;
            }
        }
        std::cout << std::endl;
    }

    void init() {
        _sbox = {{
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
            0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
            0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
            0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
            0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
        }};

        _rcon = {{
            0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
        }};

        if (_nb == 4 && _nk == 4) {
            _nr = 10;
        } else if (_nb == 8 || _nk == 8) {
            _nr = 14;
        } else {
            _nr = 12;
        }
    }

    void keyExpansion(const BufferPtr &key) {
        _expandedKey.reset(new DataType[_nb * (_nr + 1) * 4]);
        for (size_t i = 0; i < _nk * 4; i += 1) {
            _expandedKey[i] = key[i];
        }

        int r = 1;
        for (size_t i = _nk * 4; i < _nb * (_nr + 1) * 4; i += 4) {
            auto t = BufferPtr(new DataType[4] {
                _expandedKey[i - 4],
                _expandedKey[i - 3],
                _expandedKey[i - 2],
                _expandedKey[i - 1],
            });

            if (_nk <= 6) {
                if ((i / 4) % _nk == 0) {
                    keyScheduleCore(t, r++);
                }
            } else {
                if ((i / 4) % _nk == 0) {
                    keyScheduleCore(t, r++);
                } else if ((i / 4) % _nk == 4) {
                    for (size_t j = 0; j < 4; j += 1) {
                        t[j] = _sbox[t[j]];
                    }
                }
            }

            for (size_t j = 0; j < 4; j += 1) {
                _expandedKey[i + j] = (_expandedKey[i + j - _nk * 4] ^ t[j]);
            }
        }
    }

    void keyScheduleCore(BufferPtr &t, int r) {
        auto tmp = t[0];
        for (size_t i = 0; i < 3; i += 1) {
            t[i] = t[i + 1];
        }
        t[3] = tmp;

        for (size_t i = 0; i < 4; i += 1) {
            t[i] = _sbox[t[i]];
        }

        t[0] ^= _rcon[r];
    }

    BufferPtr roundKey(size_t r) {
        auto key = std::make_unique<BufferType>(_nb * 4);
        for (size_t i = 0; i < _nb * 4; i += 1) {
            key[i] = _expandedKey[_nb * 4 * r + i];
        }

        return std::move(key);
    }

    void round(size_t r) {
        subBytes();
        shiftRows();
        mixColumns();
        addRoundKey(roundKey(r));
    }

    void finalRound() {
        subBytes();
        shiftRows();
        addRoundKey(roundKey(_nr));
    }

    void subBytes() {
        for (size_t i = 0; i < _blockSize; i += 1) {
            _state[i] = _sbox[_state[i]];
        }
    }

    void shiftRows() {
        for (size_t i = 1; i < _nb; i += 1) {
            shift(i, i);
        }
    }

    void shift(size_t column, size_t offset) {
        for (size_t k = 0; k < offset; k += 1) {
            auto tmp = _state[column];
            for (size_t i = 0; i < 3; i += 1) {
                _state[i * _nb + column] = _state[(i + 1) * _nb + column];
            }
            _state[3 * _nb + column] = tmp;
        }
    }

    void mixColumns() {
        for (size_t i = 0; i < _nb; i += 1) {
            auto c = std::make_unique<BufferType>(4);
            for (size_t k = 0; k < 4; k += 1) {
                c[k] = _state[i * _nb + k];
            }

            mixColumn(c);

            for (size_t k = 0; k < 4; k += 1) {
                _state[i * _nb + k] = c[k];
            }
        }
    }

    void mixColumn(BufferPtr &column) {
        auto a = std::make_unique<BufferType>(4);
        auto b = std::make_unique<BufferType>(4);
        for (size_t i = 0; i < 4; i += 1) {
            a[i] = column[i];
            auto h = (DataType)((signed char)column[i] >> 7);
            b[i] = column[i] << 1;
            b[i] ^= 0x1B & h;
        }

        column[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
        column[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
        column[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
        column[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];
    }

    void addRoundKey(const BufferPtr &roundKey) {
        for (size_t i = 0; i < _blockSize; i += 1) {
            _state[i] ^= roundKey[i];
        }
    }

    void encBlock(const BufferPtr &data) {
        for (size_t i = 0; i < _blockSize; i += 1) {
            _state[i] ^= data[i];
        }

        addRoundKey(roundKey(0));

        for (size_t r = 1; r < _nr; r += 1) {
            round(r);
        }

        finalRound();
    }
};

#endif
